James Hahn

I implemented my symbol table using a DLB trie.  It consists of nodes 
that are made of a reference to its sibling, a reference to its children 
(which is a linked list essentially), a character value for that current 
letter in the trie, as well as a double containing the time for that word.  
This double would only be useful for the node that terminates the word, 
meaning the char value is \0). 

I chose this data structure because it greatly reduces duplicates in words. 
So for bbb0! and bb05!, the first 2 b's would not have to be stored again 
in the trie, they would essentially be represented as the same node, but 
the remaining 3 characters for each password would be new nodes.  This 
decreases space overhead with a runtime roughly the size of the word 
(which is 5 in every case). In addition, having each node contain two 
primitives for their char value and time value, it reduces even more space 
overhead and it increases overall performance because the program does 
not have to create new String objects to hold values. If I were to use an
array with a good hashing function, the program may run even faster, but
every word that starts with a 'b' would have that one character duplicated
in memory every single time (which adds up, considering there are hundreds
of thousand or millions of passwords starting with 'b').